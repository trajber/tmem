From 0e6a5dbe8bf937c36891d78ca00d3e1a5edc6f30 Mon Sep 17 00:00:00 2001
From: Mauro Romano Trajber <trajber@gmail.com>
Date: Wed, 27 Apr 2011 16:42:16 -0300
Subject: [PATCH 1/8] criacao da chamada de sistema

---
 tmem/Makefile |    1 +
 tmem/tmem.c   |   69 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 2 files changed, 70 insertions(+), 0 deletions(-)
 create mode 100644 tmem/Makefile
 create mode 100644 tmem/tmem.c

diff --git a/tmem/Makefile b/tmem/Makefile
new file mode 100644
index 0000000..1bf77ce
--- /dev/null
+++ b/tmem/Makefile
@@ -0,0 +1 @@
+obj-y := tmem.o
diff --git a/tmem/tmem.c b/tmem/tmem.c
new file mode 100644
index 0000000..8d51d15
--- /dev/null
+++ b/tmem/tmem.c
@@ -0,0 +1,69 @@
+#include <linux/linkage.h>
+#include <linux/kernel.h>
+#include <linux/namei.h>
+#include <linux/sched.h>
+#include <linux/list.h>
+#include <linux/slab.h>
+
+asmlinkage long sys_stm_event(int atomic_block_id, u8 stm_event_type) {
+	struct task_struct *task;
+	struct stm_struct *event;
+
+	/*
+	printk(KERN_DEBUG "[TMEM] The process is [%s] (pid %i)\n", current->comm, current->pid);
+	printk(KERN_DEBUG "[TMEM] The process PARENT is [%s] (pid %i)\n", current->comm, current->parent->pid);
+	printk(KERN_DEBUG "[TMEM] The process REAL_PARENT is [%s] (pid %i)\n", current->comm, current->real_parent->pid);
+	printk(KERN_DEBUG "[TMEM] The process LEADER is [%s] (pid %i)\n", current->comm, current->group_leader->pid);
+	printk(KERN_DEBUG "[TMEM] The process TGID is [%s] (pid %i)\n", current->comm, current->tgid);
+	
+	printk(KERN_DEBUG "[TMEM] The process is [%s] (pid %i)\n", current->group_leader->comm, current->group_leader->pid);
+	printk(KERN_DEBUG "[TMEM] New STM Event - AtomicBlockId [%d] EventType [%d]\n", atomic_block_id, stm_event_type);
+
+
+	printk(KERN_DEBUG "[TMEM] The process LEADER is [%s] (pid %i)\n", current->group_leader->comm, current->group_leader->pid);
+
+	if (atomic_block_id > 100) {
+		printk(KERN_DEBUG "[TMEM] ERROR: %d is too high\n", atomic_block_id);
+		return -1;
+	}
+
+	printk(KERN_DEBUG "[TMEM] Finding the process task data structure...\n");
+	*/
+	task = current->group_leader;
+	//	task = pid_task(find_vpid(current->group_leader->pid), PIDTYPE_PID);
+	//task = pid_task(current->group_leader->pid, PIDTYPE_PID);
+
+	if (task) {
+		//printk(KERN_DEBUG "[TMEM] Task found\n");
+
+		//printk(KERN_DEBUG "[TMEM] Updating event counter...\n");
+		event = &task->stm_events[atomic_block_id];
+		//printk(KERN_DEBUG "[TMEM] Current values: [%d] [%d] [%d] [%d]\n", event->tx_id, event->started, event->commited, event->aborted);
+
+		event->tx_id = atomic_block_id;
+		if (stm_event_type == 0) {
+			atomic_inc(&event->started);
+			//printk(KERN_DEBUG "[TMEM] started event registered...\n");
+			//			event->started++;
+		} else if (stm_event_type == 1) {
+			//printk(KERN_DEBUG "[TMEM] commited event registered...\n");
+			atomic_inc(&event->commited);
+			//			event->commited++;
+		} else if (stm_event_type == 2) {
+			//printk(KERN_DEBUG "[TMEM] aborted event registered...\n");
+			atomic_inc(&event->aborted);
+			//			event->aborted++;
+		} else if (stm_event_type == 3) {
+			//printk(KERN_DEBUG "[TMEM] restarted event registered...\n");
+			//			event->restarted++;
+		}
+
+	} else {
+		printk(KERN_DEBUG "[TMEM] Task NOT found\n");
+		return -2;
+	}
+
+	//	printk(KERN_DEBUG "[TMEM] Done\n");
+
+	return 1;
+}
-- 
1.7.1


From 176cd3a0533d65f610691bea38c31fbf8d2b69fb Mon Sep 17 00:00:00 2001
From: Mauro Romano Trajber <trajber@gmail.com>
Date: Wed, 27 Apr 2011 16:42:48 -0300
Subject: [PATCH 2/8] tmem adicionado ao Makefile

---
 Makefile |    2 +-
 1 files changed, 1 insertions(+), 1 deletions(-)

diff --git a/Makefile b/Makefile
index 5a7a2e4..d7449ed 100644
--- a/Makefile
+++ b/Makefile
@@ -685,7 +685,7 @@ export mod_strip_cmd
 
 
 ifeq ($(KBUILD_EXTMOD),)
-core-y		+= kernel/ mm/ fs/ ipc/ security/ crypto/ block/
+core-y		+= kernel/ mm/ fs/ ipc/ security/ crypto/ block/ tmem/
 
 vmlinux-dirs	:= $(patsubst %/,%,$(filter %/, $(init-y) $(init-m) \
 		     $(core-y) $(core-m) $(drivers-y) $(drivers-m) \
-- 
1.7.1


From 50871525bd7c9ed803e95c60acb9e4467ce976af Mon Sep 17 00:00:00 2001
From: Mauro Romano Trajber <trajber@gmail.com>
Date: Wed, 27 Apr 2011 16:45:07 -0300
Subject: [PATCH 3/8] incremento do contador de syscalls

---
 arch/x86/include/asm/unistd_32.h |    3 ++-
 1 files changed, 2 insertions(+), 1 deletions(-)

diff --git a/arch/x86/include/asm/unistd_32.h b/arch/x86/include/asm/unistd_32.h
index a755ef5..ea92a5d 100644
--- a/arch/x86/include/asm/unistd_32.h
+++ b/arch/x86/include/asm/unistd_32.h
@@ -350,10 +350,11 @@
 #define __NR_open_by_handle_at  342
 #define __NR_clock_adjtime	343
 #define __NR_syncfs             344
+#define __NR_stm_event   345
 
 #ifdef __KERNEL__
 
-#define NR_syscalls 345
+#define NR_syscalls 346
 
 #define __ARCH_WANT_IPC_PARSE_VERSION
 #define __ARCH_WANT_OLD_READDIR
-- 
1.7.1


From cfee8a97aaecee5d93eff30c49282ced68781a90 Mon Sep 17 00:00:00 2001
From: Mauro Romano Trajber <trajber@gmail.com>
Date: Wed, 27 Apr 2011 16:46:16 -0300
Subject: [PATCH 4/8] adicao na syscall table

---
 arch/x86/kernel/syscall_table_32.S |    1 +
 1 files changed, 1 insertions(+), 0 deletions(-)

diff --git a/arch/x86/kernel/syscall_table_32.S b/arch/x86/kernel/syscall_table_32.S
index abce34d..0b47af1 100644
--- a/arch/x86/kernel/syscall_table_32.S
+++ b/arch/x86/kernel/syscall_table_32.S
@@ -344,3 +344,4 @@ ENTRY(sys_call_table)
 	.long sys_open_by_handle_at
 	.long sys_clock_adjtime
 	.long sys_syncfs
+	.long sys_stm_event /* 345 */
-- 
1.7.1


From 0db81c401bb904eca6e721829038c76c4fe0e93c Mon Sep 17 00:00:00 2001
From: Mauro Romano Trajber <trajber@gmail.com>
Date: Wed, 27 Apr 2011 16:49:25 -0300
Subject: [PATCH 5/8] nova entrada no procfs/pid e funcao de callback para leitura

---
 fs/proc/base.c |   22 ++++++++++++++++++++++
 1 files changed, 22 insertions(+), 0 deletions(-)

diff --git a/fs/proc/base.c b/fs/proc/base.c
index dfa5327..14cd219 100644
--- a/fs/proc/base.c
+++ b/fs/proc/base.c
@@ -2810,6 +2810,27 @@ static int proc_pid_personality(struct seq_file *m, struct pid_namespace *ns,
 	return err;
 }
 
+static int proc_pid_stm(struct seq_file *m, struct pid_namespace *ns,	
+  struct pid *pid, struct task_struct *task)
+{
+	//	int len=sizeof(task->stm_events)/sizeof(stm_struct);
+
+	int i = 0;
+
+	for (i = 0; i < 100; i++) {
+		if (task->stm_events[i].tx_id <= 0) continue;
+		seq_printf(m, "TX_ID[%d] C[%d] A[%d] S[%d]\n", 
+		           task->stm_events[i].tx_id, 
+		           task->stm_events[i].commited, 
+		           task->stm_events[i].aborted,
+		           task->stm_events[i].started
+		           );
+	}
+
+	return 0;
+}
+
+
 /*
  * Thread groups
  */
@@ -2820,6 +2841,7 @@ static const struct pid_entry tgid_base_stuff[] = {
 	DIR("task",       S_IRUGO|S_IXUGO, proc_task_inode_operations, proc_task_operations),
 	DIR("fd",         S_IRUSR|S_IXUSR, proc_fd_inode_operations, proc_fd_operations),
 	DIR("fdinfo",     S_IRUSR|S_IXUSR, proc_fdinfo_inode_operations, proc_fdinfo_operations),
+	ONE("stm_events", S_IRUSR, proc_pid_stm),
 #ifdef CONFIG_NET
 	DIR("net",        S_IRUGO|S_IXUGO, proc_net_inode_operations, proc_net_operations),
 #endif
-- 
1.7.1


From b5c356667ffd35c4c833cf1db33329cc71532ceb Mon Sep 17 00:00:00 2001
From: Mauro Romano Trajber <trajber@gmail.com>
Date: Wed, 27 Apr 2011 16:55:02 -0300
Subject: [PATCH 6/8] estrutura para eventos relacionados a STM e novos dados em threads e processos

---
 include/linux/sched.h |    9 +++++++++
 1 files changed, 9 insertions(+), 0 deletions(-)

diff --git a/include/linux/sched.h b/include/linux/sched.h
index 18d63ce..97201e6 100644
--- a/include/linux/sched.h
+++ b/include/linux/sched.h
@@ -92,6 +92,7 @@ struct sched_param {
 #include <linux/cred.h>
 
 #include <asm/processor.h>
+#include <linux/limits.h>
 
 struct exec_domain;
 struct futex_pi_state;
@@ -1190,6 +1191,12 @@ enum perf_event_task_context {
 	perf_nr_task_contexts,
 };
 
+struct stm_struct {
+	atomic_t commited;
+	atomic_t aborted;
+	atomic_t started;
+};
+
 struct task_struct {
 	volatile long state;	/* -1 unrunnable, 0 runnable, >0 stopped */
 	void *stack;
@@ -1199,6 +1206,8 @@ struct task_struct {
 
 	int lock_depth;		/* BKL lock depth */
 
+	struct stm_struct stm_events[STM_BLOCKS_MAX];
+
 #ifdef CONFIG_SMP
 #ifdef __ARCH_WANT_UNLOCKED_CTXSW
 	int oncpu;
-- 
1.7.1


From be81918492169e44c3927d569a6944040886aad6 Mon Sep 17 00:00:00 2001
From: Mauro Romano Trajber <trajber@gmail.com>
Date: Wed, 27 Apr 2011 16:56:25 -0300
Subject: [PATCH 7/8] limite de blocos atomicos por processo

---
 include/linux/limits.h |    1 +
 1 files changed, 1 insertions(+), 0 deletions(-)

diff --git a/include/linux/limits.h b/include/linux/limits.h
index 2d0f941..daf1fb8 100644
--- a/include/linux/limits.h
+++ b/include/linux/limits.h
@@ -16,5 +16,6 @@
 #define XATTR_LIST_MAX 65536	/* size of extended attribute namelist (64k) */
 
 #define RTSIG_MAX	  32
+#define STM_BLOCKS_MAX 9999 /* max of atomic blocs per process */
 
 #endif
-- 
1.7.1


From 04370e37944d373898d48ee7ed2d88bbfa7b1e68 Mon Sep 17 00:00:00 2001
From: Mauro Romano Trajber <trajber@gmail.com>
Date: Wed, 27 Apr 2011 18:50:25 -0300
Subject: [PATCH 8/8] identificador para o bloco atomico

---
 include/linux/sched.h |    1 +
 1 files changed, 1 insertions(+), 0 deletions(-)

diff --git a/include/linux/sched.h b/include/linux/sched.h
index 97201e6..8fe548e 100644
--- a/include/linux/sched.h
+++ b/include/linux/sched.h
@@ -1192,6 +1192,7 @@ enum perf_event_task_context {
 };
 
 struct stm_struct {
+	int tx_id;
 	atomic_t commited;
 	atomic_t aborted;
 	atomic_t started;
-- 
1.7.1

